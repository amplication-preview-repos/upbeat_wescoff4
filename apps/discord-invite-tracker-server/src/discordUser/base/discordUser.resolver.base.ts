/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiscordUser } from "./DiscordUser";
import { DiscordUserCountArgs } from "./DiscordUserCountArgs";
import { DiscordUserFindManyArgs } from "./DiscordUserFindManyArgs";
import { DiscordUserFindUniqueArgs } from "./DiscordUserFindUniqueArgs";
import { CreateDiscordUserArgs } from "./CreateDiscordUserArgs";
import { UpdateDiscordUserArgs } from "./UpdateDiscordUserArgs";
import { DeleteDiscordUserArgs } from "./DeleteDiscordUserArgs";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { Role } from "../../role/base/Role";
import { DiscordUserService } from "../discordUser.service";
@graphql.Resolver(() => DiscordUser)
export class DiscordUserResolverBase {
  constructor(protected readonly service: DiscordUserService) {}

  async _discordUsersMeta(
    @graphql.Args() args: DiscordUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiscordUser])
  async discordUsers(
    @graphql.Args() args: DiscordUserFindManyArgs
  ): Promise<DiscordUser[]> {
    return this.service.discordUsers(args);
  }

  @graphql.Query(() => DiscordUser, { nullable: true })
  async discordUser(
    @graphql.Args() args: DiscordUserFindUniqueArgs
  ): Promise<DiscordUser | null> {
    const result = await this.service.discordUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiscordUser)
  async createDiscordUser(
    @graphql.Args() args: CreateDiscordUserArgs
  ): Promise<DiscordUser> {
    return await this.service.createDiscordUser({
      ...args,
      data: {
        ...args.data,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DiscordUser)
  async updateDiscordUser(
    @graphql.Args() args: UpdateDiscordUserArgs
  ): Promise<DiscordUser | null> {
    try {
      return await this.service.updateDiscordUser({
        ...args,
        data: {
          ...args.data,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiscordUser)
  async deleteDiscordUser(
    @graphql.Args() args: DeleteDiscordUserArgs
  ): Promise<DiscordUser | null> {
    try {
      return await this.service.deleteDiscordUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Subscription], { name: "subscriptions" })
  async findSubscriptions(
    @graphql.Parent() parent: DiscordUser,
    @graphql.Args() args: SubscriptionFindManyArgs
  ): Promise<Subscription[]> {
    const results = await this.service.findSubscriptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  async getRole(@graphql.Parent() parent: DiscordUser): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
