/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InviteService } from "../invite.service";
import { InviteCreateInput } from "./InviteCreateInput";
import { Invite } from "./Invite";
import { InviteFindManyArgs } from "./InviteFindManyArgs";
import { InviteWhereUniqueInput } from "./InviteWhereUniqueInput";
import { InviteUpdateInput } from "./InviteUpdateInput";

export class InviteControllerBase {
  constructor(protected readonly service: InviteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Invite })
  async createInvite(@common.Body() data: InviteCreateInput): Promise<Invite> {
    return await this.service.createInvite({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        inviteId: true,
        inviter: true,
        invitee: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Invite] })
  @ApiNestedQuery(InviteFindManyArgs)
  async invites(@common.Req() request: Request): Promise<Invite[]> {
    const args = plainToClass(InviteFindManyArgs, request.query);
    return this.service.invites({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        inviteId: true,
        inviter: true,
        invitee: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Invite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async invite(
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<Invite | null> {
    const result = await this.service.invite({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        inviteId: true,
        inviter: true,
        invitee: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Invite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInvite(
    @common.Param() params: InviteWhereUniqueInput,
    @common.Body() data: InviteUpdateInput
  ): Promise<Invite | null> {
    try {
      return await this.service.updateInvite({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          inviteId: true,
          inviter: true,
          invitee: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Invite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInvite(
    @common.Param() params: InviteWhereUniqueInput
  ): Promise<Invite | null> {
    try {
      return await this.service.deleteInvite({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          inviteId: true,
          inviter: true,
          invitee: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
